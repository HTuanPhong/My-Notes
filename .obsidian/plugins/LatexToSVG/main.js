/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LatexSvgPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
var DEFAULT_SETTINGS = {
  invertColorsInDarkMode: true
};
var LatexSvgSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h4", { text: "Latex To Svg settings" });
    new import_obsidian.Setting(containerEl).setName("Clear cached SVGs").setDesc("SVGs rendered with LatexSvg are stored in a database, so diagrams don't have to be re-rendered from scratch every time you open a page. Use this to clear the cache and force all diagrams to be re-rendered.").addButton((button) => button.setIcon("trash").setTooltip("Clear cached SVGs").onClick(async () => {
      const basePath = this.app.vault.adapter.basePath;
      const dir = path.resolve(path.join(basePath, `/.obsidian/plugins/LatexToSVG/temp`));
      fs.rmSync(dir, { recursive: true, force: true });
      fs.mkdirSync(dir);
    }));
  }
};

// main.ts
var fs2 = __toESM(require("fs"));
var path2 = __toESM(require("path"));
var import_child_process = require("child_process");
var LatexSvgPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new LatexSvgSettingTab(this.app, this));
    this.hookCloseButton();
    this.registerLatexCodeBlock();
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  hookCloseButton() {
    const closeButton = document.querySelector("div.mod-close");
    if (closeButton) {
      closeButton.addEventListener("mouseenter", () => {
        this.deleteUnusedSVG();
        this.rewriteIndex();
      });
    }
  }
  rewriteIndex() {
    const { vault } = this.app;
    const files = vault.getMarkdownFiles();
    files.forEach((indexfile) => {
      if (indexfile.basename.includes("index - ")) {
        const basePath = this.app.vault.adapter.basePath;
        const resourcesPath = path2.join(basePath, path2.join(path2.join(indexfile.path, "../"), "Resources"));
        let result = "";
        const files2 = fs2.readdirSync(resourcesPath);
        files2.forEach(function(file) {
          const filePath = path2.join(resourcesPath, file);
          if (fs2.statSync(filePath).isDirectory()) {
            if (file != "Figures") {
              result += `
${file}:

`;
              const subFiles = fs2.readdirSync(filePath);
              subFiles.forEach(function(subFile) {
                result += `- [${subFile}](<${path2.join(indexfile.path, "../", "Resources", file, subFile).replace(/\\/g, "/")}>)
`;
              });
            }
          } else {
            result = `- [${file}](<${path2.join(indexfile.path, "../", "Resources", file).replace(/\\/g, "/")}>)
` + result;
          }
        });
        fs2.writeFileSync(path2.join(basePath, indexfile.path), result);
      }
    });
  }
  async deleteUnusedSVG() {
    const { vault } = this.app;
    const fileContents = await Promise.all(
      vault.getMarkdownFiles().map((file) => vault.cachedRead(file))
    );
    const codeBlocks = [];
    fileContents.forEach((content) => {
      const regex = /^```latex([\s\S]*?)^```/gm;
      let match = regex.exec(content);
      while (match !== null) {
        codeBlocks.push(this.md5(match[1].trim().replaceAll("&nbsp;", "").split("\n").map((line) => line.trim()).filter((line) => line).join("\n")));
        match = regex.exec(content);
      }
    });
    const basePath = this.app.vault.adapter.basePath;
    const tempPath = path2.join(basePath, `/.obsidian/plugins/LatexToSVG/temp`);
    fs2.readdir(tempPath, (err, files) => {
      if (err)
        throw err;
      files.forEach((file) => {
        const filePath = path2.join(tempPath, file);
        if (!codeBlocks.includes(file)) {
          fs2.rmSync(filePath, { recursive: true, force: true });
        }
      });
    });
  }
  recolorSVG(svg) {
    svg = svg.replaceAll(/(#000)/g, `currentColor`).replaceAll(/(#fff)/g, `var(--background-primary)`);
    return svg;
  }
  tidyLatexSource(source) {
    return source.replaceAll("&nbsp;", "").split("\n").map((line) => line.trim()).filter((line) => line).join("\n");
  }
  //  Formatted version of a popular md5 implementation
  //  Original copyright (c) Paul Johnston & Greg Holt.
  //  The function itself is now 42 lines long.
  md5(inputString) {
    var hc = "0123456789abcdef";
    function rh(n) {
      var j, s = "";
      for (j = 0; j <= 3; j++)
        s += hc.charAt(n >> j * 8 + 4 & 15) + hc.charAt(n >> j * 8 & 15);
      return s;
    }
    function ad(x2, y) {
      var l = (x2 & 65535) + (y & 65535);
      var m = (x2 >> 16) + (y >> 16) + (l >> 16);
      return m << 16 | l & 65535;
    }
    function rl(n, c2) {
      return n << c2 | n >>> 32 - c2;
    }
    function cm(q, a2, b2, x2, s, t) {
      return ad(rl(ad(ad(a2, q), ad(x2, t)), s), b2);
    }
    function ff(a2, b2, c2, d2, x2, s, t) {
      return cm(b2 & c2 | ~b2 & d2, a2, b2, x2, s, t);
    }
    function gg(a2, b2, c2, d2, x2, s, t) {
      return cm(b2 & d2 | c2 & ~d2, a2, b2, x2, s, t);
    }
    function hh(a2, b2, c2, d2, x2, s, t) {
      return cm(b2 ^ c2 ^ d2, a2, b2, x2, s, t);
    }
    function ii(a2, b2, c2, d2, x2, s, t) {
      return cm(c2 ^ (b2 | ~d2), a2, b2, x2, s, t);
    }
    function sb(x2) {
      var i2;
      var nblk = (x2.length + 8 >> 6) + 1;
      var blks = new Array(nblk * 16);
      for (i2 = 0; i2 < nblk * 16; i2++)
        blks[i2] = 0;
      for (i2 = 0; i2 < x2.length; i2++)
        blks[i2 >> 2] |= x2.charCodeAt(i2) << i2 % 4 * 8;
      blks[i2 >> 2] |= 128 << i2 % 4 * 8;
      blks[nblk * 16 - 2] = x2.length * 8;
      return blks;
    }
    var i, x = sb("" + inputString), a = 1732584193, b = -271733879, c = -1732584194, d = 271733878, olda, oldb, oldc, oldd;
    for (i = 0; i < x.length; i += 16) {
      olda = a;
      oldb = b;
      oldc = c;
      oldd = d;
      a = ff(a, b, c, d, x[i + 0], 7, -680876936);
      d = ff(d, a, b, c, x[i + 1], 12, -389564586);
      c = ff(c, d, a, b, x[i + 2], 17, 606105819);
      b = ff(b, c, d, a, x[i + 3], 22, -1044525330);
      a = ff(a, b, c, d, x[i + 4], 7, -176418897);
      d = ff(d, a, b, c, x[i + 5], 12, 1200080426);
      c = ff(c, d, a, b, x[i + 6], 17, -1473231341);
      b = ff(b, c, d, a, x[i + 7], 22, -45705983);
      a = ff(a, b, c, d, x[i + 8], 7, 1770035416);
      d = ff(d, a, b, c, x[i + 9], 12, -1958414417);
      c = ff(c, d, a, b, x[i + 10], 17, -42063);
      b = ff(b, c, d, a, x[i + 11], 22, -1990404162);
      a = ff(a, b, c, d, x[i + 12], 7, 1804603682);
      d = ff(d, a, b, c, x[i + 13], 12, -40341101);
      c = ff(c, d, a, b, x[i + 14], 17, -1502002290);
      b = ff(b, c, d, a, x[i + 15], 22, 1236535329);
      a = gg(a, b, c, d, x[i + 1], 5, -165796510);
      d = gg(d, a, b, c, x[i + 6], 9, -1069501632);
      c = gg(c, d, a, b, x[i + 11], 14, 643717713);
      b = gg(b, c, d, a, x[i + 0], 20, -373897302);
      a = gg(a, b, c, d, x[i + 5], 5, -701558691);
      d = gg(d, a, b, c, x[i + 10], 9, 38016083);
      c = gg(c, d, a, b, x[i + 15], 14, -660478335);
      b = gg(b, c, d, a, x[i + 4], 20, -405537848);
      a = gg(a, b, c, d, x[i + 9], 5, 568446438);
      d = gg(d, a, b, c, x[i + 14], 9, -1019803690);
      c = gg(c, d, a, b, x[i + 3], 14, -187363961);
      b = gg(b, c, d, a, x[i + 8], 20, 1163531501);
      a = gg(a, b, c, d, x[i + 13], 5, -1444681467);
      d = gg(d, a, b, c, x[i + 2], 9, -51403784);
      c = gg(c, d, a, b, x[i + 7], 14, 1735328473);
      b = gg(b, c, d, a, x[i + 12], 20, -1926607734);
      a = hh(a, b, c, d, x[i + 5], 4, -378558);
      d = hh(d, a, b, c, x[i + 8], 11, -2022574463);
      c = hh(c, d, a, b, x[i + 11], 16, 1839030562);
      b = hh(b, c, d, a, x[i + 14], 23, -35309556);
      a = hh(a, b, c, d, x[i + 1], 4, -1530992060);
      d = hh(d, a, b, c, x[i + 4], 11, 1272893353);
      c = hh(c, d, a, b, x[i + 7], 16, -155497632);
      b = hh(b, c, d, a, x[i + 10], 23, -1094730640);
      a = hh(a, b, c, d, x[i + 13], 4, 681279174);
      d = hh(d, a, b, c, x[i + 0], 11, -358537222);
      c = hh(c, d, a, b, x[i + 3], 16, -722521979);
      b = hh(b, c, d, a, x[i + 6], 23, 76029189);
      a = hh(a, b, c, d, x[i + 9], 4, -640364487);
      d = hh(d, a, b, c, x[i + 12], 11, -421815835);
      c = hh(c, d, a, b, x[i + 15], 16, 530742520);
      b = hh(b, c, d, a, x[i + 2], 23, -995338651);
      a = ii(a, b, c, d, x[i + 0], 6, -198630844);
      d = ii(d, a, b, c, x[i + 7], 10, 1126891415);
      c = ii(c, d, a, b, x[i + 14], 15, -1416354905);
      b = ii(b, c, d, a, x[i + 5], 21, -57434055);
      a = ii(a, b, c, d, x[i + 12], 6, 1700485571);
      d = ii(d, a, b, c, x[i + 3], 10, -1894986606);
      c = ii(c, d, a, b, x[i + 10], 15, -1051523);
      b = ii(b, c, d, a, x[i + 1], 21, -2054922799);
      a = ii(a, b, c, d, x[i + 8], 6, 1873313359);
      d = ii(d, a, b, c, x[i + 15], 10, -30611744);
      c = ii(c, d, a, b, x[i + 6], 15, -1560198380);
      b = ii(b, c, d, a, x[i + 13], 21, 1309151649);
      a = ii(a, b, c, d, x[i + 4], 6, -145523070);
      d = ii(d, a, b, c, x[i + 11], 10, -1120210379);
      c = ii(c, d, a, b, x[i + 2], 15, 718787259);
      b = ii(b, c, d, a, x[i + 9], 21, -343485551);
      a = ad(a, olda);
      b = ad(b, oldb);
      c = ad(c, oldc);
      d = ad(d, oldd);
    }
    return rh(a) + rh(b) + rh(c) + rh(d);
  }
  registerLatexCodeBlock() {
    this.registerMarkdownCodeBlockProcessor("latex", (source, el, ctx) => {
      const div = el.createEl("div");
      div.setAttribute("class", "latexSVG");
      source = this.tidyLatexSource(source);
      const md5code = this.md5(source);
      source = `\\batchmode\\documentclass[dvisvgm]{minimal}
${source}`.replace("\\begin{document}", "\\begin{document}\n\\nonstopmode");
      const basePath = this.app.vault.adapter.basePath;
      const dir = path2.resolve(path2.join(basePath, `/.obsidian/plugins/LatexToSVG/temp/${md5code}`));
      if (!fs2.existsSync(dir)) {
        fs2.mkdirSync(dir);
        fs2.writeFileSync(path2.join(dir, "input.tex"), source);
        (0, import_child_process.exec)("latex -output-format=dvi -halt-on-error -file-line-error input.tex", { cwd: dir, timeout: 1e4 }, (error, stdout) => {
          if (error) {
            div.textContent = stdout.toString().replace(/^[\s\S]*?(?=\.\/input\.tex:)/, "").replace("./input.tex", "line");
            fs2.rmSync(dir, { recursive: true, force: true });
          } else {
            (0, import_child_process.exec)("dvisvgm -n input.dvi", { cwd: dir, timeout: 1e4 }, () => {
              const data = fs2.readFileSync(path2.join(dir, "input.svg"));
              div.innerHTML = this.recolorSVG(data.toString());
              (0, import_child_process.exec)("del -f *.aux", { cwd: dir, timeout: 1e4 });
              (0, import_child_process.exec)("del -f *.log", { cwd: dir, timeout: 1e4 });
              (0, import_child_process.exec)("del -f *.dvi", { cwd: dir, timeout: 1e4 });
              (0, import_child_process.exec)("del -f *.tex", { cwd: dir, timeout: 1e4 });
            });
          }
        });
      } else {
        const data = fs2.readFileSync(path2.join(dir, "input.svg"));
        div.innerHTML = this.recolorSVG(data.toString());
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
